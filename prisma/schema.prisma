// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  }

datasource db {
  provider = "cockroachdb"
  url      = env("db_conn")
}

model Stores {
  id           BigInt         @id @default(autoincrement())
  name         String         @unique
  users        Users[]
  productStore ProductStore[]
  Invoices     Invoice[]
  Installments Installments[]
}

model Users {
  id          BigInt @id @default(autoincrement())
  userName    String @unique
  password    String
  authorityId Int
  storeId     BigInt
  store       Stores @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model ProductStore {
  id               BigInt             @id @default(autoincrement())
  productId        BigInt            
  price            Int
  Location         String
  Description      String
  storeId          BigInt            
  store            Stores             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Product          Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  InvoicePurchases InvoicePurchases[]
}

model Product {
  id           BigInt         @id @default(autoincrement())
  name         String         @unique
  barcode      String         @unique
  Category     String
  mass         String
  ProductStore ProductStore[]
}

model Invoice {
  id               BigInt             @id @default(autoincrement())
  storeId          BigInt
  installmentId    BigInt?
  dateTime         DateTime           @default(now())
  store            Stores             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Installment      Installments?      @relation(fields: [installmentId], references: [id], onDelete: SetNull)
  total            Int
  InvoicePurchases InvoicePurchases[]
}

model Installments {
  id           BigInt    @id @default(autoincrement())
  customerName String    
  total        Int       @default(0)
  storeId      BigInt   
  store        Stores             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Invoice      Invoice[]
  @@unique([storeId, customerName])
  // @@unique([customerName], map: "Stores")
}

model InvoicePurchases {
  invoiceId      BigInt       @id
  productStoreId BigInt
  ProductStore   ProductStore @relation(fields: [productStoreId], references: [id])
  Invoice        Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
